#!/usr/bin/python3

from core.ModuleParser import ModuleParser
from core.Command import *
from core.Config import Config
from core.state import State

import logging, argparse, sys

logging.basicConfig( level=logging.DEBUG
                   , format='[%(asctime)s %(filename)s:%(lineno)d] %(message)s'
                   )

ModuleParser.parse()

parser = argparse.ArgumentParser()
parser.add_argument('command')
parser.add_argument('name', nargs='?')
parser.add_argument('-m', '--module', nargs='*', default=[], action='append')

args = parser.parse_args()

state = State(args)

logging.debug(state.git.user)

res = CommandObserver.execute(args.command, state)

if res:
    print('Done!')
else:
    print('Failure.')

"""

proj create projname modules:
    call route(create, params) #params: [projname, modules]
        create folder structure
        create and call modules, save them etc.

proj open projname:

"""






# DB.exec("CREATE TABLE test (id int, name text)")

# db.exec("CREATE TABLE templates (id int, name text, modules text")
# db.exec("CREATE TABLE projects (id int, template_id int, config text, created_at text, updated_at text")

# db.exec("CREATE TABLE modules (id int, name text, priority int)")


"""
actions:
    create projname [template]
        folder structure, init vagrant, init bitbucket/github repo and push, firefox session
        create projopen script:
        open sublime project, firefox, check new commits on remote, up and ssh to vagrant

        templates: modules to be included.

    create-manually projname [modules]
        same as create but include only folder structure by default.
        Any additional modules can be passed as parameters
       
    open
        run projopen script
   
    archive
        push
        gzip
        move to (?)

    assign [modules]
        move existing project into system




    modules:
        subtree with modules operations

        Modules has priorities. Modules with lower number in priority runs at first.

        current modules:
            - git @maybe: bitbucket/github/raw custom scripts (?)
            - vagrant
            - firefox
            - sublime

        @maybe:
            - heroku
            - testings (A/B, slow load, high load, run local tests, etc)

        update [modulename] priority

        enable/disable [modulename]

"""

# project
# db:
#   folder
#   last_access
# config:
#   ide: sublime | tmux
#   openAs
#   openScript: "init shell scripts"
# folder structure:
#   .git
#   src
#     -- Vagrantfile
#   db   <-- optional
#   doc <-- optional
#   .projopen <-- autogenerated bash script
#   





# $1 -> project name

# open existing project
# go to project dir (~/devel/proj_name)
# open firefox profile
# run vagrant
# open sublime project
# save pids for fox and sublime

# new project
# create vagrant
# create new fox profile
# create new sublime project
# create git
# create bitbucket (?)
# new trello/jira board (?)

# archive project
# move all to bitbucket
# move all to some archive folder (files dir, fox profile, sublime project)
# remove fox profile from available
# delete vagrant vm. Probably backup some data firstly
